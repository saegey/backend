# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
#
if ENV['CODECLIMATE_REPO_TOKEN']
  require 'codeclimate-test-reporter'
  CodeClimate::TestReporter.start
end
ENV["RACK_ENV"] = "test"

require "bundler"
require 'webmock/rspec'
require 'dotenv'

Bundler.require(:default, :test)

Dotenv.load('.env.test')

require_relative "../lib/initializer"

include Helpers

# WebMock.disable_net_connect!(allow_localhost: false)

OmniAuth.config.test_mode = true
OmniAuth.config.add_mock(:github, {:uid => '12345'})
OmniAuth.config.add_mock(:twitter, {:uid => '67890'})

# pull in test initializers
Pliny::Utils.require_glob("#{Config.root}/spec/support/**/*.rb")

RSpec.configure do |config|
  config.before :suite do
    DatabaseCleaner.clean_with(:truncation)
    DatabaseCleaner.strategy = :truncation
  end

  config.before :all do
    load('db/seeds.rb') if File.exist?('db/seeds.rb')
  end
  
  config.before :each do
    DatabaseCleaner.start
  end

  config.after :each do
    DatabaseCleaner.clean
  end

  config.expect_with :minitest
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  # config.order = 'random'

  # the rack app to be tested with rack-test:
  def app
    @rack_app || fail("Missing @rack_app")
  end

  def auth
    {
      "rack.session" => {
        account_id: @user.account_id,
        user_id: @user.id
      }
    }
  end
end
