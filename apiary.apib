FORMAT: 1A

# fobless
Fobless api

## Users [/v1/users]
### Retrieve authenticated User [GET]
+ Response 200 (application/json)

        {
            "id": 70,
            "first_name": "John",
            "last_name": "Does",
            "email": "john.does@gmail.com",
            "provider": "github",
            "provider_id": "577676",
            "updated_at": "2015-03-01T16:42:07+00:00",
            "created_at": "2015-03-01T16:42:07+00:00",
            "account": {
                "id": 75,
                "properties": [
                    {
                        "created_at": "2015-03-01T17:57:29+00:00",
                        "id": 55,
                        "name": "test property",
                        "updated_at": "2015-03-01T17:57:29+00:00"
                    },
                    {
                        "created_at": "2015-03-01T17:58:20+00:00",
                        "id": 56,
                        "name": "test property updated",
                        "updated_at": "2015-03-01T18:07:45+00:00"
                    }
                ],
                "updated_at": "2015-03-01T16:42:07+00:00",
                "created_at": "2015-03-01T16:42:07+00:00"
            }
        }

### Create a User [POST]
+ Request (application/json)

        {
            "first_name": "John",
            "last_name": "Does",
            "email": "john.does@gmail.com",
            "password": "test_password"
        }

+ Response 201 (application/json)

        {
            "id": 70,
            "first_name": "John",
            "last_name": "Does",
            "email": "john.does@gmail.com",
            "provider": null,
            "provider_id": null,
            "updated_at": "2015-03-01T16:42:07+00:00",
            "created_at": "2015-03-01T16:42:07+00:00",
            "account": {
                "id": 75,
                "properties": [],
                "updated_at": "2015-03-01T16:42:07+00:00",
                "created_at": "2015-03-01T16:42:07+00:00"
            }
        }

### Update authenticated User [PATCH]
+ Request (application/json)

        {
            "first_name": "Jane",
            "last_name": "Does",
            "password": "new_test_password",
            "email": "john.does@gmail.com"
        }

+ Response 200 (application/json)

        {
            "id": 69,
            "first_name": "Jane",
            "last_name": "Does",
            "email": "john.does@gmail.com",
            "provider": "github",
            "provider_id": "577676",
            "updated_at": "2015-03-01T16:49:23+00:00",
            "created_at": "2015-03-01T16:28:51+00:00",
            "account": {
                "id": 74,
                "properties": [],
                "updated_at": "2015-03-01T16:28:51+00:00",
                "created_at": "2015-03-01T16:28:51+00:00"
            }
        }

### Delete authenticated user [DELETE]
+ Response 200 (application/json)

        {
            "id": 69,
            "first_name": "Jane",
            "last_name": "Does",
            "email": "john.does@gmail.com",
            "provider": "github",
            "provider_id": "577676",
            "updated_at": "2015-03-01T16:49:23+00:00",
            "created_at": "2015-03-01T16:28:51+00:00",
            "account": {
                "id": 74,
                "properties": [],
                "updated_at": "2015-03-01T16:28:51+00:00",
                "created_at": "2015-03-01T16:28:51+00:00"
            }
        }

# Group Authentication
## GET /v1/auth/github
+ Response 200 (application/json)

        {
          "id":70,
          "first_name":"John",
          "last_name":"Does",
          "email":"john.does@gmail.com",
          "provider":"github",
          "provider_id":"577676",
          "crypted_password":"5b274a7c291b665ad02e3c9cc9d7df3d8da3eb08b6ae690c96bee4fdecbb8",
          "account_id":75,
          "created_at":"2015-03-01 16:42:07 +0000",
          "updated_at":"2015-03-01 16:42:07 +0000"
        }

## POST /v1/auth/password

+ Parameters

    + email (required, string, `john.does@gmail.com`) ... Email of user.
    + password (required, string, `test_password`) ... Password of user.

+ Request (application/json)
    
        { "email": "john.does@gmail.com", "password": "test_password" }

+ Response 200 (application/json)
        
        {
          "id":70,
          "first_name":"John",
          "last_name":"Does",
          "email":"john.does@gmail.com",
          "provider":"github",
          "provider_id":"577676",
          "updated_at":"2015-03-01T16:42:07+00:00",
          "created_at":"2015-03-01T16:42:07+00:00",
          "account":{
            "id":75,
            "properties":[],
            "updated_at":"2015-03-01T16:42:07+00:00",
            "created_at":"2015-03-01T16:42:07+00:00"
          }
        }

## Properties Collection [/v1/properties]
Properties linked to an account for currently authenticated user
### List Properties [GET]

+ Response 200 (application/json)

        [
            {
                "created_at": "2015-03-01T17:57:29+00:00",
                "id": 55,
                "name": "test property",
                "updated_at": "2015-03-01T17:57:29+00:00",
                "units": []
            },
            {
                "created_at": "2015-03-01T17:58:20+00:00",
                "id": 56,
                "name": "test property 1",
                "updated_at": "2015-03-01T17:58:20+00:00",
                "units": []
            }
        ]

### Create Property [POST]

+ Request (application/json)
    
        { "name": "test property" }

+ Response 201 (application/json)

        {
            "created_at": "2015-03-01T18:00:20+00:00",
            "id": 57,
            "name": "test property",
            "updated_at": "2015-03-01T18:00:20+00:00",
            "units": []
        }

+ Request (application/json)
    
        {}

+ Response 400 (application/json)

        {
            "name": [
                "is not present"
            ]
        }

## Property [/v1/properties/{id}]
A property linked to an account

+ Parameters

    + id (required, integer, `57`) ... Id.

### Retrieve a Property [GET]

+ Response 200 (application/json)

        {
            "created_at": "2015-03-01T18:00:20+00:00",
            "id": 57,
            "name": "test property",
            "updated_at": "2015-03-01T18:00:20+00:00",
            "units": []
        }

### Update Property [PATCH]

+ Request (application/json)
    
        { "name": "test property updated" }

+ Response 200 (application/json)
    
        {
            "created_at": "2015-03-01T17:58:20+00:00",
            "id": 57,
            "name": "test property updated",
            "updated_at": "2015-03-01T18:07:45+00:00",
            "units": []
        }
    
### Delete a Property [DELETE]

+ Response 200 (application/json)

        {
            "created_at": "2015-03-01T18:00:20+00:00",
            "id": 57,
            "name": "test property",
            "updated_at": "2015-03-01T18:00:20+00:00",
            "units": []
        }

## Property Units Collection [/v1/properties/{property_id}/units]
Properties units linked to an account for currently authenticated user

+ Parameters

    + property_id (required, integer, `57`) ... Id of property.

### List Property Units [GET]

+ Response 200 (application/json)
    
        [
            {
                "created_at": "2015-03-01T18:30:21+00:00",
                "id": 34,
                "updated_at": null,
                "property_id": 56,
                "pin_code": "4060"
            },
            {
                "created_at": "2015-03-01T18:30:47+00:00",
                "id": 35,
                "updated_at": null,
                "property_id": 56,
                "pin_code": "8238"
            }
        ]

### Create Property Unit [POST]

+ Request (application/json)
    
        { "pin_code": "1234" }

+ Response 201 (application/json)
    
        {
            "created_at": "2015-03-01T18:54:42+00:00",
            "id": 37,
            "updated_at": null,
            "property_id": 56,
            "pin_code": "1234"
        }

+ Request (application/json)
    
        {}

+ Response 400 (application/json)

        {
            "pin_code": [
                "is not present"
            ]
        }

## Property Units [/v1/properties/{property_id}/units/{id}]
Property unit linked to an account for currently authenticated user

+ Parameters

    + property_id (required, integer, `57`) ... Id of property.
    + id (required, integer, `36`) ... Id of property unit.

### Retrieve Property Unit [GET]

+ Response 200 (application/json)

        {
            "created_at": "2015-03-01T18:37:50+00:00",
            "id": 36,
            "updated_at": null,
            "property_id": 56,
            "pin_code": "2398"
        }

### Update Property Unit [PATCH]

+ Request (application/json)

        { "pin_code": "4060" }

+ Response 200 (application/json)

        {
            "created_at": "2015-03-01T18:30:21+00:00",
            "id": 34,
            "updated_at": "2015-03-01T18:30:21+00:00",
            "property_id": 56,
            "pin_code": "4060"
        }

### Delete Property Unit [DELETE]

+ Response 200 (application/json)

        {
            "created_at": "2015-03-01T18:54:42+00:00",
            "id": 37,
            "updated_at": "2015-03-01T18:30:21+00:00",
            "property_id": 56,
            "pin_code": "3070"
        }